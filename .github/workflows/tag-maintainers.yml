name: Tag Plugin Maintainers
on:
  pull_request_target:
    types: [opened, ready_for_review, reopened, synchronize]
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.run_id }}
  cancel-in-progress: true
permissions:
  contents: read
  pull-requests: write
jobs:
  tag-maintainers:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      github.event.pull_request.state == 'open'
    steps:
      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        if: vars.CI_APP_ID
        id: app-token
        with:
          app-id: ${{ vars.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Get Nixpkgs revision from flake.lock
        id: get-nixpkgs
        run: |
          echo "rev=$(jq -r '.nodes.nixpkgs.locked.rev' flake.lock)" >> "$GITHUB_OUTPUT"

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/${{ steps.get-nixpkgs.outputs.rev }}.tar.gz
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Get changed plugin files
        id: changed-files
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          CHANGED_FILES=$(gh pr diff ${{ github.event.pull_request.number }} --name-only | grep '^plugins/' || true)
          echo "Changed plugin files:"
          echo "$CHANGED_FILES"
          echo "plugin_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract maintainers from changed files
        id: extract-maintainers
        run: |
          declare -A MAINTAINERS_TO_NOTIFY
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          if [[ '${{ steps.changed-files.outputs.plugin_files }}' == '' ]]; then
            echo "No plugin files changed"
            echo "maintainers=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Evaluating nixvim meta system for maintainers..."
          ALL_MAINTAINERS=$(nix eval --impure --expr "
            let
              nixvim = import ./.;
              lib = nixvim.inputs.nixpkgs.lib.extend nixvim.lib.overlay;

              emptyConfig = lib.nixvim.evalNixvim {
                modules = [ { _module.check = false; } ];
                extraSpecialArgs = {
                  pkgs = null;
                };
              };

              inherit (emptyConfig.config.meta) maintainers;
            in
              maintainers
          " --json 2>/dev/null || echo "{}")

          while IFS= read -r FILE; do
            if [[ -z "$FILE" ]]; then
              continue
            fi

            echo "Processing file: $FILE"

            if [[ "$FILE" == plugins/by-name/*/default.nix ]]; then
              PLUGIN_DIR=$(dirname "$FILE")
            else
              PLUGIN_DIR=$(dirname "$FILE")
            fi

            # Look for maintainers associated with this plugin directory
            FILE_MAINTAINERS=$(echo "$ALL_MAINTAINERS" | jq -r --arg plugindir "$PLUGIN_DIR" '
              to_entries[] |
              select(.key | endswith($plugindir)) |
              .value[] |
              select(has("github")) |
              .github
            ' 2>/dev/null || echo "")

            COMBINED_MAINTAINERS=$(echo "$FILE_MAINTAINERS" | sort -u | grep -v '^$' || echo "")

            if [[ -n "$COMBINED_MAINTAINERS" ]]; then
              echo "Found maintainers for $FILE: $COMBINED_MAINTAINERS"
              for MAINTAINER in $COMBINED_MAINTAINERS; do
                if [[ "$MAINTAINER" != "$PR_AUTHOR" ]]; then
                  MAINTAINERS_TO_NOTIFY["$MAINTAINER"]=1
                  echo "Adding maintainer: $MAINTAINER"
                fi
              done
            else
              echo "No maintainers found for $FILE"
            fi
          done <<< "${{ steps.changed-files.outputs.plugin_files }}"

          MAINTAINERS_LIST=$(printf "%s " "${!MAINTAINERS_TO_NOTIFY[@]}")
          echo "maintainers=${MAINTAINERS_LIST% }" >> $GITHUB_OUTPUT
          echo "Found maintainers: ${MAINTAINERS_LIST% }"

      - name: Get current reviewers
        id: current-reviewers
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          PENDING_REVIEWERS=$(gh pr view ${{ github.event.pull_request.number }} --json reviewRequests --jq '.reviewRequests[].login')
          PAST_REVIEWERS=$(gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" --jq '.[].user.login')
          USERS_TO_EXCLUDE=$(printf "%s\n%s" "$PENDING_REVIEWERS" "$PAST_REVIEWERS" | sort -u)

          echo "pending_reviewers<<EOF" >> $GITHUB_OUTPUT
          echo "$PENDING_REVIEWERS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "users_to_exclude<<EOF" >> $GITHUB_OUTPUT
          echo "$USERS_TO_EXCLUDE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Current pending reviewers: $PENDING_REVIEWERS"
          echo "Complete list of users to exclude: $USERS_TO_EXCLUDE"

      - name: Check maintainer collaborator status
        id: check-collaborators
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          MAINTAINERS: ${{ steps.extract-maintainers.outputs.maintainers }}
          USERS_TO_EXCLUDE: ${{ steps.current-reviewers.outputs.users_to_exclude }}
        run: |
          REPO="${{ github.repository }}"
          NEW_REVIEWERS=()

          echo "Maintainers to check: $MAINTAINERS"
          echo "Users to exclude:"
          echo "$USERS_TO_EXCLUDE"

          for MAINTAINER in $MAINTAINERS; do
            if echo "$USERS_TO_EXCLUDE" | grep -q -w "$MAINTAINER"; then
              echo "$MAINTAINER is already a reviewer, skipping."
              continue
            fi

            echo "Checking if $MAINTAINER is a collaborator..."
            if gh api "/repos/$REPO/collaborators/$MAINTAINER" --silent; then
              echo "User $MAINTAINER is a collaborator, adding to new reviewers list"
              NEW_REVIEWERS+=("$MAINTAINER")
            else
              echo "User $MAINTAINER is not a repository collaborator, probably missed the automated invite to the maintainers team, ignoring"
            fi
          done

          # Output new reviewers as space-separated list
          NEW_REVIEWERS_LIST=$(printf "%s " "${NEW_REVIEWERS[@]}")
          echo "new_reviewers=${NEW_REVIEWERS_LIST% }" >> $GITHUB_OUTPUT
          echo "New reviewers to add: ${NEW_REVIEWERS_LIST% }"

      - name: Remove outdated reviewers
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          MAINTAINERS: ${{ steps.extract-maintainers.outputs.maintainers }}
          PENDING_REVIEWERS: ${{ steps.current-reviewers.outputs.pending_reviewers }}
        run: |

          remove_reviewers() {
            local reviewers_to_remove="$1"
            local reason="$2"

            if [[ -n "$reviewers_to_remove" ]]; then
              for REVIEWER in $reviewers_to_remove; do
                echo "Removing review request from $REVIEWER ($reason)"
                gh api --method DELETE "/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/requested_reviewers" \
                  --input - <<< "{\"reviewers\": [\"$REVIEWER\"]}"
              done
            fi
          }

          if [[ -z "$MAINTAINERS" ]]; then
            echo "No plugin maintainers found, removing all pending reviewers"
            if [[ -n "$PENDING_REVIEWERS" ]]; then
              remove_reviewers "$PENDING_REVIEWERS" "no plugin files changed or no maintainers found"
            else
              echo "No pending reviewers to remove."
            fi
            exit 0
          fi

          CURRENT_MAINTAINERS=$(echo "$MAINTAINERS" | tr ' ' '\n' | sort -u)
          OUTDATED_REVIEWERS=$(comm -23 <(echo "$PENDING_REVIEWERS" | sort) <(echo "$CURRENT_MAINTAINERS"))

          if [[ -n "$OUTDATED_REVIEWERS" ]]; then
            remove_reviewers "$OUTDATED_REVIEWERS" "no longer a maintainer of changed files"
          else
            echo "No outdated reviewers to remove."
          fi

      - name: Add new reviewers
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          NEW_REVIEWERS: ${{ steps.check-collaborators.outputs.new_reviewers }}
        run: |

          if [[ -n "$NEW_REVIEWERS" ]]; then
            REVIEWERS_CSV=$(echo "$NEW_REVIEWERS" | tr ' ' ',')
            echo "Requesting reviews from: $REVIEWERS_CSV"
            gh pr edit ${{ github.event.pull_request.number }} --add-reviewer "$REVIEWERS_CSV"
          else
            echo "No new reviewers to add."
          fi
